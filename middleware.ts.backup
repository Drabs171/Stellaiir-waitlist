import { NextRequest, NextResponse } from 'next/server'

// Rate limiting storage (in production, use Redis or similar)
const rateLimitMap = new Map<string, { count: number; resetTime: number }>()

// Generate nonce using Web Crypto API (Edge Runtime compatible)
function generateNonce(): string {
  // Simple base64 nonce for CSP - Edge Runtime compatible
  const array = new Uint8Array(16)
  crypto.getRandomValues(array)
  return btoa(String.fromCharCode(...array))
}

// Clean up rate limit entries periodically
setInterval(() => {
  const now = Date.now()
  for (const [key, entry] of rateLimitMap.entries()) {
    if (now > entry.resetTime) {
      rateLimitMap.delete(key)
    }
  }
}, 60000) // Clean up every minute

function getClientIP(request: NextRequest): string {
  const forwarded = request.headers.get('x-forwarded-for')
  const realIP = request.headers.get('x-real-ip')
  const remoteAddr = request.headers.get('x-remote-addr')
  
  if (forwarded) {
    return forwarded.split(',')[0].trim()
  }
  
  return realIP || remoteAddr || '127.0.0.1'
}

function isRateLimited(ip: string, maxRequests: number = 60, windowMs: number = 60000): boolean {
  const now = Date.now()
  const windowStart = now - windowMs
  
  const entry = rateLimitMap.get(ip)
  
  if (!entry || entry.resetTime < now) {
    // New window or expired entry
    rateLimitMap.set(ip, { count: 1, resetTime: now + windowMs })
    return false
  }
  
  if (entry.count >= maxRequests) {
    return true
  }
  
  // Increment count
  entry.count++
  return false
}

export function middleware(request: NextRequest) {
  const response = NextResponse.next()
  const { pathname } = request.nextUrl
  
  // Generate nonce for CSP using Web Crypto API
  const nonce = generateNonce()
  
  // Get client IP for rate limiting
  const clientIP = getClientIP(request)
  
  // Apply rate limiting to API routes and form submissions
  if (pathname.startsWith('/api/') || request.method === 'POST') {
    let maxRequests = 60 // Default: 60 requests per minute
    let windowMs = 60000 // 1 minute
    
    // Stricter limits for sensitive endpoints
    if (pathname.includes('/api/waitlist') || pathname.includes('/api/admin')) {
      maxRequests = 10 // 10 requests per minute
      windowMs = 60000
    }
    
    if (isRateLimited(clientIP, maxRequests, windowMs)) {
      return new NextResponse(
        JSON.stringify({ 
          error: 'Rate limit exceeded. Please try again later.',
          retryAfter: Math.ceil(windowMs / 1000)
        }),
        { 
          status: 429, 
          headers: {
            'Content-Type': 'application/json',
            'Retry-After': String(Math.ceil(windowMs / 1000))
          }
        }
      )
    }
  }
  
  // Set comprehensive security headers
  const headers = response.headers
  
  // Content Security Policy
  const cspDirectives = [
    "default-src 'self'",
    `script-src 'self' 'nonce-${nonce}' 'strict-dynamic' https://challenges.cloudflare.com https://js.hcaptcha.com`,
    `style-src 'self' 'unsafe-inline' https://fonts.googleapis.com`,
    "font-src 'self' https://fonts.gstatic.com data:",
    "img-src 'self' data: https: blob:",
    "media-src 'self' data: blob:",
    "connect-src 'self' https://api.hcaptcha.com https://hcaptcha.com",
    "frame-src https://hcaptcha.com https://assets.hcaptcha.com",
    "worker-src 'self' blob:",
    "child-src 'self'",
    "object-src 'none'",
    "base-uri 'self'",
    "form-action 'self'",
    "frame-ancestors 'none'",
    "upgrade-insecure-requests"
  ].join('; ')
  
  headers.set('Content-Security-Policy', cspDirectives)
  
  // Security headers
  headers.set('X-Frame-Options', 'DENY')
  headers.set('X-Content-Type-Options', 'nosniff')
  headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  headers.set('X-XSS-Protection', '1; mode=block')
  
  // HSTS (HTTP Strict Transport Security)
  if (request.nextUrl.protocol === 'https:') {
    headers.set('Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload')
  }
  
  // Permissions Policy (Feature Policy)
  const permissionsPolicy = [
    'camera=()',
    'microphone=()',
    'geolocation=()',
    'interest-cohort=()',
    'payment=()',
    'usb=()',
    'bluetooth=()',
    'magnetometer=()',
    'accelerometer=()',
    'gyroscope=()',
    'clipboard-write=(self)',
    'clipboard-read=()'
  ].join(', ')
  
  headers.set('Permissions-Policy', permissionsPolicy)
  
  // Additional security headers
  headers.set('X-DNS-Prefetch-Control', 'off')
  headers.set('X-Permitted-Cross-Domain-Policies', 'none')
  headers.set('Cross-Origin-Embedder-Policy', 'unsafe-none')
  headers.set('Cross-Origin-Opener-Policy', 'same-origin')
  headers.set('Cross-Origin-Resource-Policy', 'same-origin')
  
  // Cache control for static assets
  if (pathname.startsWith('/_next/static/') || 
      pathname.includes('.js') || 
      pathname.includes('.css') || 
      pathname.includes('.woff') || 
      pathname.includes('.woff2')) {
    headers.set('Cache-Control', 'public, max-age=31536000, immutable')
  }
  
  // No cache for API routes and sensitive pages
  if (pathname.startsWith('/api/') || pathname.startsWith('/admin')) {
    headers.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate')
    headers.set('Pragma', 'no-cache')
    headers.set('Expires', '0')
  }
  
  // Add nonce to response for CSP
  headers.set('X-Nonce', nonce)
  
  // CORS headers for API routes
  if (pathname.startsWith('/api/')) {
    headers.set('Access-Control-Allow-Origin', process.env.NODE_ENV === 'production' ? 'https://stellaiir.com' : '*')
    headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
    headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With')
    headers.set('Access-Control-Max-Age', '86400') // 24 hours
  }
  
  // Handle preflight requests
  if (request.method === 'OPTIONS') {
    return new NextResponse(null, { status: 200, headers })
  }
  
  return response
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder files
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.png$|.*\\.jpg$|.*\\.jpeg$|.*\\.gif$|.*\\.svg$).*)',
  ],
}